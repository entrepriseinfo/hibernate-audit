=Deployment=

Add `hibernate-audit.jar` in your Hibernate application classpath. You can get the jar file from the hibernate-audit maven repository located here: http://hibernate-audit.googlecode.com/svn/repository/releases

=Activation=

Register {{{com.googlecode.hibernate.audit.listener.AuditListener}}} as a listerner to your session factory for the following events:

    * post-insert
    * post-update
    * post-delete
    * pre-collection-update
    * pre-collection-remove
    * post-collection-recreate

You can register the listener directly in your session factory configuration or if 
you are using Spring to instantiate the session factory then you can do the following in the spring configuration XML which containts your {{{LocalSessionFactoryBean}}} bean

{{{
     ....
     <bean id="mySessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">

       ... application specific session factory properties......

       <property name="eventListeners">
            <map>
                <entry key="post-insert">
                    <list>
                        <ref local="com.googlecode.hibernate.audit.listener.AuditListener" />
                    </list>
                </entry>
                <entry key="post-update">
                    <list>
                        <ref local="com.googlecode.hibernate.audit.listener.AuditListener" />
                    </list>
                </entry>
                <entry key="post-delete">
                    <list>
                        <ref local="com.googlecode.hibernate.audit.listener.AuditListener" />
                    </list>
                </entry>
                <entry key="pre-collection-update">
                    <list>
                        <ref local="com.googlecode.hibernate.audit.listener.AuditListener" />
                    </list>
                </entry>
                <entry key="pre-collection-remove">
                    <list>
                        <ref local="com.googlecode.hibernate.audit.listener.AuditListener" />
                    </list>
                </entry>
                <entry key="post-collection-recreate">
                    <list>
                        <ref local="com.googlecode.hibernate.audit.listener.AuditListener" />
                    </list>
                </entry>
              </map>
        </property>
    </bean>
}}}

=HBA-Specific Properties=

===`hba.configuration.observer.clazz`===

`hba.configuration.observer.clazz` specifies application specific implementation of {{{com.googlecode.hibernate.audit.configuration.AuditConfigurationObserver}}} interface.

{{{
hba.configuration.observer.clazz=com.myapp.MyAppAuditSessionFactoryObserver
}}}

Using a custom AuditConfigurationObserver the application can specify application specific implementation that controls all extensions. The {{{AuditConfigurationObserver.auditConfigurationCreated}}} method will be invoked at the end of the SessionFactory initialization process - see [http://www.hibernate.org/hib_docs/v3/api/org/hibernate/event/Initializable.html#initialize(org.hibernate.cfg.Configuration) Initializable.initialize(org.hibernate.cfg.Configuration)]
 
===`hba.audited-model.dynamic-update`===

`hba.audited-model.dynamic-update` controll whether the audit framework will set the dynamic-update for every audited entity to true - Note that this property have effect only when its value is true. Using the property set to true will guarantee that the audit will capture all updates that happend for the audited domain (this statement does not include explicitly not audited entities/properties which are always excluded from the audit) - enabling this will cause some performance penalties because Hibernate will not use a single update statement for a particular entity type but it will use dynamic update statement that will be generated on the fly based on which entity properties were modified. For more information check the [http://www.hibernate.org Hibernate site]

===`hba.mappingfile`===

`hba.mappingfile` if set this specified the HBM location for the hibernate entities configuration. This is useful only when the application want to specify a different mapping from the one that is provided with the audit framework. For example the application can change table names, column names and etc. You can use the HBM file provided in the JAR file as a template and modify it according to your needs. Hibernate audit does not uses hibernate annotations so you can control all mapping information from the HBM file only.

=Application Extensions=

=Error Handling=